extends /include/bootstrapV4

block beforehtml
  -
    const title = 'Xiaomi Watch Clone Tool'
    ;[ogImageWidth, ogImageHeight, ogImage] = [1200, 600, 'https://i.imgur.com/M39Y0Be.png']

block style
  meta(property="og:description", content="A tool for Xiaomi Watch to clone encrypted Mifare Classic tag.")
  meta(property="og:locale", content="zh_TW")
  meta(property="og:title", content=title)
  meta(property="og:type", content="website")
  meta(property="og:url", content=`${baseurl}mifare-xiaomi.html`)
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif
      .input-group-prepend > .input-group-text
        width: 80px
      .letter-spacing-n1px
        &, .btn, textarea, select, input
          letter-spacing: -1px
      .text-sm
        font-size: 0.875rem

block content
  #app.my-3.container.text-monospace(v-cloak)
    h4.mb-3.text-center.letter-spacing-n1px #[.bgicon.bgicon-chameleon-ultra.mr-1] #{title}
    .form-group.letter-spacing-n1px
      label Connect method:
      .input-group.input-group-sm.mb-3
        select.form-control(v-model="ls.adapter")
          option(value="ble") BLE (PC &amp; Android &amp; iPhone)
          option(value="usb") USB Serial (PC only)
        .input-group-append: button.btn.btn-outline-secondary(@click="btnAdapterTips") #[i.fa.fa-fw.fa-question]
    .card.shadow-sm.mb-2
      h6.card-header.bg-light ① Mifare Dump
      .card-body.px-3.pt-3.pb-2.letter-spacing-n1px
        p.text-sm Click "Import" button to import a mifare dump exported from #[a(target="_blank", href=`${baseurl}mifare1k.html`) mifare1k.html] or other tools like MCT, Proxmark3. Keys in dump will be used to sync with Xiaomi Watch. Dump will be deleted after page closed.
        input.d-none(type="file", ref="dumpImport", @change="dumpImport?.cb?.($event.target.files[0])", @cancel="dumpImport?.cb?.()")
        .input-group.input-group-sm.mb-2.was-validated
          .input-group-prepend: span.input-group-text.justify-content-center UID
          input.form-control(pattern="[\\dA-Fa-f]{8}([\\dA-Fa-f]{6})?([\\dA-Fa-f]{6})?", maxlength="20", placeholder="Hex format of UID", required, v-model="ss.uid")
          .input-group-append: button.btn.btn-outline-secondary(type="button", @click="ss.uid = ''") #[i.fa.fa-fw.fa-times]
        .input-group.input-group-sm.mb-2.was-validated
          .input-group-prepend: span.input-group-text.justify-content-center ATQA
          input.form-control(pattern="[\\dA-Fa-f]{4}", maxlength="4", placeholder="Hex format of ATQA", required, v-model="ss.atqa")
          .input-group-append: button.btn.btn-outline-secondary(type="button", @click="ss.atqa = ''") #[i.fa.fa-fw.fa-times]
        .input-group.input-group-sm.mb-2.was-validated
          .input-group-prepend: span.input-group-text.justify-content-center SAK
          input.form-control(pattern="[\\dA-Fa-f]{2}", maxlength="2", placeholder="Hex format of SAK", required, v-model="ss.sak")
          .input-group-append: button.btn.btn-outline-secondary(type="button", @click="ss.sak = ''") #[i.fa.fa-fw.fa-times]
        .row.mx-n1.mb-2
          .col.px-1: button.btn.btn-block.btn-outline-success(@click="btnImportDump") #[i.fa.fa-fw.fa-file-code-o] Import
          .col.px-1: button.btn.btn-block.btn-outline-primary(@click="btnExportDump") #[i.fa.fa-fw.fa-floppy-o] Export
        button.btn.btn-sm.btn-block.btn-outline-danger.mb-2(@click="btnNewDump") #[i.fa.mr-1.fa-repeat] New dump
    .card.shadow-sm.mb-2
      h6.card-header.bg-light ② ChameleonUltra Emulate
      .card-body.px-3.pt-3.pb-2.letter-spacing-n1px
        p.text-sm Choose a slot and click the "Emulate" button to emulate as non-encrypted tag. Then use Xiaomi Watch to clone the ChameleonUltra.
        .input-group.input-group-sm.mb-2
          .input-group-prepend: span.input-group-text.justify-content-center Slot
          select.form-control.form-control-sm.letter-spacing-n1px(v-model.number="ss.slot")
            option(v-for="i of _.range(8)" :value="i") Slot {{ i + 1 }}
        button.btn.btn-block.btn-outline-success.mb-2(@click="btnWriteEmuBlock0") #[i.fa.mr-1.fa-sign-in] Emulate
    .card.shadow-sm.mb-2
      h6.card-header.bg-light ③ Sync with Xiaomi Watch
      .card-body.px-3.pt-3.pb-2.letter-spacing-n1px
        p.text-sm.mb-2 After clone, click "Write" button to write original dump to Xiaomi Watch.
        .custom-control.custom-checkbox.mb-2
          input.custom-control-input#ss-checkUidBeforeWrite(type="checkbox", v-model="ss.checkUidBeforeWrite")
          label.custom-control-label(for="ss-checkUidBeforeWrite") Verify UID before write
        button.btn.btn-block.btn-outline-primary.mb-2(@click="btnGen2Write") #[i.fa.mr-1.fa-download] Write
      .card-body.px-3.pt-3.pb-2.letter-spacing-n1px.border-top
        p.text-sm.mb-2 Click "Verify" button to compare between dump and Xiaomi Watch (skip block 0).
        button.btn.btn-block.btn-outline-success.mb-2(@click="btnGen2Verify") #[i.fa.mr-1.fa-exchange] Verify
      .card-body.px-3.pt-3.pb-2.letter-spacing-n1px.border-top
        p.text-sm.mb-2 Click "Read" button to read from Xiaomi Watch (skip block 0). After read, you can click "Export" or "Write" button.
        button.btn.btn-block.btn-outline-info.mb-2(@click="btnGen2Read") #[i.fa.mr-1.fa-upload] Read
    .modal.fade(tabindex="-1", ref="dumpExport")
      .modal-dialog.modal-dialog-centered.modal-xl
        .modal-content
          .modal-header
            h5.modal-title #[i.fa.fa-fw.fa-floppy-o] Export Dump
            button.close(type="button", data-dismiss="modal") #[span &times;]
          .modal-body
            a.btn.btn-block.btn-outline-primary.mb-2.text-left(
              :download="dumpExport.json.download",
              :href="dumpExport.json.href",
              target="_blank")
              .my-1 {{ dumpExport.json.download }}
              h6.text-muted.mb-1 Click to download as JSON format. This format can be used in Proxmark3 and Chameleon Mini GUI.
            a.btn.btn-block.btn-outline-primary.text-left(
              :download="dumpExport.bin.download",
              :href="dumpExport.bin.href",
              target="_blank")
              .my-1 {{ dumpExport.bin.download }}
              h6.text-muted.mb-1 Click to download as BIN format. This format can be used in Proxmark3, libnfc, mfoc...
            a.btn.btn-block.btn-outline-primary.text-left(
              :download="dumpExport.eml.download",
              :href="dumpExport.eml.href",
              target="_blank")
              .my-1 {{ dumpExport.eml.download }}
              h6.text-muted.mb-1 Click to download as EML format. This format can be used in Proxmark3 emulator.
            a.btn.btn-block.btn-outline-primary.text-left(
              :download="dumpExport.mct.download",
              :href="dumpExport.mct.href",
              target="_blank")
              .my-1 {{ dumpExport.mct.download }}
              h6.text-muted.mb-1 Click to download as MCT format. This format can be used in Mifare Classic Tool.

block script
  script.
    const { Buffer, ChameleonUltra, Debug, DeviceMode, FreqType, TagType, WebbleAdapter, WebserialAdapter } = window.ChameleonUltraJS
    const ultraUsb = new ChameleonUltra()
    ultraUsb.use(new Debug())
    ultraUsb.use(new WebserialAdapter())
    const ultraBle = new ChameleonUltra()
    ultraBle.use(new Debug())
    ultraBle.use(new WebbleAdapter())

    const toHex = buf => _.toUpper(buf.toString('hex'))
    const WELL_KNOWN_KEYS = Buffer.from(['FFFFFFFFFFFF'].join(''), 'hex').chunk(6)
    const isMf1MagicBlock0 = buf => Buffer.isBuffer(buf) && buf.length >= 16 && _.includes([0x08, 0x88], buf[5]) && toHex(buf.subarray(6, 8)) === '0400' && buf[4] === buf.subarray(0, 4).xor()

    window.vm = new Vue({
      el: '#app',
      data: {
        ls: {
          adapter: 'ble',
        },
        ss: {
          atqa: '0004',
          checkUidBeforeWrite: true,
          dump: null,
          sak: '08',
          slot: 0,
          uid: 'DEADBEEF',
        },
        dumpImport: { cb: null },
        dumpExport: {
          json: { download: '', href: '' },
          bin: { download: '', href: '' },
          eml: { download: '', href: '' },
          mct: { download: '', href: '' },
        },
      },
      async mounted () {
        // 自動儲存功能
        for (const [storage, key] of [[localStorage, 'ls'], [sessionStorage, 'ss']]) {
          try {
            const saved = JSON5.parse(storage.getItem(location.pathname))
            if (saved) {
              if (key === 'ss') {
                try {
                  saved.dump = Buffer.from(saved.dump, 'base64url')
                } catch (err) {}
              }
              this.$set(this, key, _.merge(this[key], saved))
            }
          } catch (err) {}
          this.$watch(key, () => {
            let saved = { ...this[key] }
            if (Buffer.isBuffer(saved.dump)) saved = { ...saved, dump: saved.dump.toString('base64url') }
            storage.setItem(location.pathname, JSON5.stringify(saved))
          }, { deep: true })
        }
        if (!Buffer.isBuffer(this.ss.dump)) this.ss.dump = this.mf1GenEmptyDump()
      },
      computed: {
        ultra () {
          return this.ls.adapter === 'usb' ? ultraUsb : ultraBle
        },
      },
      methods: {
        async swalFire (args) {
          if (_.isPlainObject(args)) args.footer ??= '<a target="_blank" href="https://github.com/RfidResearchGroup/ChameleonUltra?tab=readme-ov-file#official-channels">Have questions? Join Discord!</a>'
          return await Swal.fire(args)
        },
        async btnAdapterTips () {
          await this.swalFire({
            title: 'Browser & OS',
            html: '<strong class="text-success">BLE</strong> is supported in ChromeOS, Chrome for Windows 10, macOS, Android 6.0, Microsoft Edge for Windows and <a class="btn-link" target="_blank" href="https://apps.apple.com/app/bluefy-web-ble-browser/id1492822055">Bluefy</a> for iPhone and iPad.<hr><strong class="text-success">USB</strong> is supported on all desktop platforms (ChromeOS, Linux, macOS, and Windows).',
          })
        },
        async btnImportDump () {
          const { ultra } = this
          try {
            this.showLoading({ text: 'Importing' })
            const file = await new Promise(resolve => {
              this.$set(this.dumpImport, 'cb', resolve)
              const $ref = this.$refs.dumpImport
              $ref.value = ''
              $ref.click()
            })
            if (_.isNil(file)) throw new Error('No file selected')
            if (file.size > 1e6) throw new Error(`File size too large: ${file.size} bytes`)
            const dotIdx = file.name.lastIndexOf('.')
            if (dotIdx === -1) throw new Error('Invalid file name')
            const ext = _.toLower(file.name.slice(dotIdx + 1))
            const buf = new Buffer(await file.arrayBuffer())
            const res = {
              dump: null,
            }
            switch (ext) {
              case 'bin': {
                res.dump = buf
                break
              }
              case 'json':
              case 'json5': {
                const card = ChameleonUltra.mf1DumpFromPm3Json(buf)
                _.merge(res, {
                  uid: toHex(card.uid),
                  atqa: toHex(card.atqa.toReversed()),
                  sak: toHex(card.sak),
                  dump: card?.body,
                })
                break
              }
              case 'eml': {
                res.dump = ChameleonUltra.mf1DumpFromEml(buf)
                break
              }
              case 'mct': {
                res.dump = ChameleonUltra.mf1DumpFromMct(buf)
                break
              }
              default:
                throw new Error(`Unsupported file extension: ${ext}`)
            }
            if (!Buffer.isBuffer(res.dump)) throw new Error('Failed to import dump')
            if (res.dump.length !== 1024) throw new Error(`dump size invalid: ${res.dump?.length} bytes`)

            // try anti-collision
            if (_.isNil(res.uid) && isMf1MagicBlock0(res.dump)) {
              _.merge(res, {
                atqa: toHex(res.dump.subarray(6, 8).toReversed()),
                sak: toHex(res.dump.subarray(5, 6)),
                uid: toHex(res.dump.subarray(0, 4)),
              })
            }
            this.$set(this, 'ss', { ...this.ss, ...res })

            await this.swalFire({ icon: 'success', title: 'Import success', text: 'Please verify import result. Invalid bytes has been replace with 0x00.' })
          } catch (err) {
            ultra.emitter.emit('error', err)
            await this.swalFire({ icon: 'error', title: 'Import failed', text: err.message })
          }
        },
        async btnExportDump () {
          const dump = this.ss.dump
          const atqa = Buffer.from(this.ss.atqa, 'hex').toReversed()
          const sak = Buffer.from(this.ss.sak, 'hex')
          const uid = Buffer.from(this.ss.uid, 'hex')
          const strUid = toHex(uid)

          // json
          const json = ChameleonUltra.mf1DumpToPm3Json({ atqa, body: dump, sak, uid })
          this.$set(this.dumpExport, 'json', {
            href: URL.createObjectURL(new Blob([JSON.stringify(json, null, 2)], { type: 'application/octet-stream' })),
            download: `hf-mf-${strUid}.json`,
          })

          // bin
          this.$set(this.dumpExport, 'bin', {
            href: URL.createObjectURL(new Blob([dump], { type: 'application/octet-stream' })),
            download: `hf-mf-${strUid}.bin`,
          })

          // eml
          const eml = ChameleonUltra.mf1DumpToEml({ body: dump })
          this.$set(this.dumpExport, 'eml', {
            href: URL.createObjectURL(new Blob([eml], { type: 'application/octet-stream' })),
            download: `hf-mf-${strUid}.eml`,
          })

          // mct
          const mct = ChameleonUltra.mf1DumpToMct({ body: dump })
          this.$set(this.dumpExport, 'mct', {
            href: URL.createObjectURL(new Blob([mct], { type: 'application/octet-stream' })),
            download: `hf-mf-${strUid}.mct`,
          })

          await new Promise(resolve => this.$nextTick(resolve)) // wait for DOM update
          const $ref = window.jQuery(this.$refs.dumpExport)
          $ref.modal('show')
        },
        async btnNewDump () {
          const { ultra } = this
          try {
            const msg1 = 'Mifare dump will be REPLACED! Continue?'
            if (!await this.confirm(msg1, 'Yes', 'Cancel')) return
            this.$set(this.ss, 'dump', this.mf1GenEmptyDump())
          } catch (err) {
            ultra.emitter.emit('error', err)
            await this.swalFire({ icon: 'error', title: 'Reset failed', text: err.message })
          }
        },
        async btnWriteEmuBlock0 () {
          const { ultra } = this
          try {
            const { atqa, dump, sak, slot, uid } = this.ss
            ultra.emitter.emit('debug', 'web', JSON.stringify({ atqa, dump, sak, slot, uid }))
            const slotName = await ultra.cmdSlotGetFreqName(slot, FreqType.HF) ?? '(no name)'
            const msg1 = `The hf data of slot ${slot + 1} "${slotName}" will be REPLACE! Continue?`
            if (!await this.confirm(msg1, 'Yes', 'Cancel')) return
            this.showLoading({ text: 'Emulating...' })
            await ultra.cmdChangeDeviceMode(DeviceMode.TAG)
            await ultra.slotChangeTagTypeAndActive(slot, TagType.MIFARE_1024) // reset slot
            await ultra.cmdSlotSetFreqName(slot, FreqType.HF, `xiaomi_${uid}`)
            // set anti-coll
            const tag = {
              atqa: Buffer.from(atqa, 'hex').toReversed(),
              sak: Buffer.from(sak, 'hex'),
              uid: Buffer.from(uid, 'hex').slice(-4),
            }
            await ultra.cmdMf1SetAntiCollMode(false)
            await ultra.cmdHf14aSetAntiCollData(tag)
            await ultra.cmdMf1EmuWriteBlock(0, dump.subarray(0, 16)) // set block0
            await ultra.cmdSlotSaveSettings()
            await this.swalFire({ icon: 'success', title: 'Emulate successfully!' })
          } catch (err) {
            ultra.emitter.emit('error', err)
            await this.swalFire({ icon: 'error', title: 'Failed to emulate tag.', text: err.message })
          }
        },
        async btnGen2Write () {
          const { ultra } = this
          try {
            const { checkUidBeforeWrite, dump, uid } = this.ss
            const msg1 = 'Mifare Data in Xiaomi Watch will be REPLACE! Continue?'
            if (!await this.confirm(msg1, 'Yes', 'Cancel')) return
            if (checkUidBeforeWrite) {
              const antiColl = await this.mfReadAntiColl()
              if (antiColl.uid !== uid) throw new Error(`UID is different, read = ${toHex(antiColl.uid)}`)
            }
            const genSwalCfg = i => ({
              html: `<div class="d-flex flex-column"><div class="progress mb-2"><div class="progress-bar progress-bar-striped" role="progressbar" style="width: ${i / 16 * 100}%"></div></div><div class="d-flex justify-content-between"><span>Writing Mifare / Gen2:</span><span>${i} / 16</span></div></div>`,
            })
            this.showLoading(genSwalCfg(0))
            const failed = []
            for (let i = 0; i < 16; i++) {
              try {
                const sectorData = dump.subarray(i * 64).subarray(0, 64)
                const keys = [
                  ..._.map([0, 10], pos => sectorData.subarray(pos - 16).subarray(0, 6)),
                  ...WELL_KNOWN_KEYS,
                ]
                const { success } = await ultra.mf1WriteSectorByKeys(i, keys, sectorData)
                for (let j = 0; j < 4; j++) if (!success[j]) failed.push(i * 4 + j)
              } catch (err) {
                if (!ultra.isConnected()) throw err
                ultra.emitter.emit('error', err)
                for (let j = 0; j < 4; j++) failed.push(i * 4 + j)
              }
              this.showLoading(genSwalCfg(i + 1))
            }
            await ultra.cmdChangeDeviceMode(DeviceMode.TAG)
            _.pull(failed, 0) // ignore error of block 0
            if (failed.length !== 0) throw new Error(`${failed.length} blocks failed: ${failed.join(',')}`)
            await this.swalFire({ icon: 'success', title: 'Write success' })
          } catch (err) {
            ultra.emitter.emit('error', err)
            await this.swalFire({ icon: 'error', title: 'Write failed', text: err.message })
          }
        },
        async mfReadAntiColl () {
          const { ultra } = this
          const antiColl = {}
          this.showLoading({ text: 'Reading anti-collision...' })
          const tag1 = _.first(await ultra.cmdHf14aScan())
          _.merge(antiColl, {
            atqa: toHex(tag1.atqa.toReversed()),
            sak: toHex(tag1.sak),
            uid: toHex(tag1.uid),
          })
          return antiColl
        },
        async mfGen2Read () {
          const { ultra } = this
          const res = {}

          // read anti-collision
          _.merge(res, await this.mfReadAntiColl())
          ultra.emitter.emit('debug', 'web', `res = ${JSON.stringify(res)}`)

          const genSwalCfg = i => ({
            html: `<div class="d-flex flex-column"><div class="progress mb-2"><div class="progress-bar progress-bar-striped" role="progressbar" style="width: ${i / 16 * 100}%"></div></div><div class="d-flex justify-content-between"><span>Reading Mifare / Gen2:</span><span>${i} / 16</span></div></div>`,
          })
          this.showLoading(genSwalCfg(0))
          const failed = []
          const newDump = this.mf1GenEmptyDump({
            atqa: Buffer.from(res.atqa, 'hex').toReversed(),
            sak: Buffer.from(res.sak, 'hex'),
            uid: Buffer.from(res.uid, 'hex'),
          })
          const oldDump = this.ss.dump
          for (let i = 0; i < 16; i++) {
            try {
              const oldSectorData = oldDump.subarray(i * 64).subarray(0, 64)
              const keys = [
                ..._.map([0, 10], pos => oldSectorData.subarray(pos - 16).subarray(0, 6)),
                ...WELL_KNOWN_KEYS,
              ]
              const { data: newSectorData, success } = await ultra.mf1ReadSectorByKeys(i, keys)
              newDump.set(newSectorData, i * 64)
              for (let j = 0; j < 4; j++) if (!success[j]) failed.push(i * 4 + j)
            } catch (err) {
              if (!ultra.isConnected()) throw err
              for (let j = 0; j < 4; j++) failed.push(i * 4 + j)
              ultra.emitter.emit('error', err)
            }
            this.showLoading(genSwalCfg(i + 1))
          }
          await ultra.cmdChangeDeviceMode(DeviceMode.TAG)
          res.dump = newDump
          _.pull(failed, 0) // ignore error of block 0
          if (failed.length !== 0) throw new Error(`${failed.length} blocks failed: ${failed.join(',')}`)
          return res
        },
        async btnGen2Verify () {
          const { ultra } = this
          try {
            const dump = this.ss.dump
            const other = await this.mfGen2Read()
            if (other.uid !== this.ss.uid) throw new Error(`UID is different, read = ${toHex(other.uid)}`)
            const diffs = []
            for (let i = 1; i < 64; i++) {
              const [blk1, blk2] = _.map([dump, other.dump], buf => buf.subarray(i * 16).subarray(0, 16))
              if (!blk1.equals(blk2)) diffs.push(i)
            }
            if (diffs.length !== 0) throw new Error(`${diffs.length} blocks are different: ${diffs.join(',')}`)
            await this.swalFire({ icon: 'success', title: 'All blocks is equal.' })
          } catch (err) {
            ultra.emitter.emit('error', err)
            await this.swalFire({ icon: 'error', title: 'Verify failed', text: err.message })
          }
        },
        async btnGen2Read () {
          const { ultra } = this
          try {
            const other = await this.mfGen2Read()
            this.$set(this, 'ss', { ...this.ss, ...other })
            await this.swalFire({ icon: 'success', title: 'Read success' })
          } catch (err) {
            ultra.emitter.emit('error', err)
            await this.swalFire({ icon: 'error', title: 'Read failed', text: err.message })
          }
        },
        async confirm (text, confirmButtonText, cancelButtonText) {
          return await new Promise((resolve, reject) => {
            let isConfirmed = false
            const args = {
              cancelButtonColor: '#3085d6',
              cancelButtonText,
              confirmButtonColor: '#d33',
              confirmButtonText,
              didDestroy: () => { resolve(isConfirmed) },
              focusCancel: true,
              icon: 'warning',
              reverseButtons: true,
              showCancelButton: true,
              text,
            }
            Swal.fire(args).then(res => { isConfirmed = res.isConfirmed })
          })
        },
        mf1GenEmptyDump (antiColl) {
          antiColl ??= {
            atqa: Buffer.from(this.ss.atqa, 'hex').toReversed(),
            sak: Buffer.from(this.ss.sak, 'hex'),
            uid: Buffer.from(this.ss.uid, 'hex'),
          }
          return ChameleonUltra.mf1GenEmptyDump({ ...antiColl, tagType: TagType.MIFARE_1024 })
        },
        showLoading (opts = {}) {
          opts = {
            allowOutsideClick: false,
            showConfirmButton: false,
            ...opts,
          }
          if (Swal.isVisible()) return Swal.update(_.omit(opts, ['progressStepsDistance']))
          Swal.fire({ ...opts, didRender: () => { Swal.showLoading() } })
        },
      },
    })
