extends /include/bootstrapV4

block beforehtml
  -
    const title = 'Device Settings'
    ;[ogImageWidth, ogImageHeight, ogImage] = [1200, 600, 'https://i.imgur.com/TgVdsVo.png']

block style
  meta(property="og:description", content="A ChameleonUltra tool to management the device info and settings.")
  meta(property="og:locale", content="zh_TW")
  meta(property="og:title", content=title)
  meta(property="og:type", content="website")
  meta(property="og:url", content=`${baseurl}device-settings.html`)
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif
      .input-group-prepend > .input-group-text
        width: 140px
      .letter-spacing-n1px
        &, .btn, textarea, select, input
          letter-spacing: -1px
      .text-sm
        font-size: 0.875rem

block content
  #app.my-3.container.text-monospace(v-cloak)
    h4.mb-3.text-center.letter-spacing-n1px #[.bgicon.bgicon-chameleon-ultra.mr-1] #{title}
    .form-group
      label Connect method:
      .input-group.input-group-sm.mb-3
        select.form-control(v-model="ls.adapter")
          option(value="ble") BLE (PC &amp; Android &amp; iPhone)
          option(value="usb") USB Serial (PC only)
        .input-group-append: button.btn.btn-outline-secondary(@click="btnAdapterTips") #[i.fa.fa-fw.fa-question]
    .row.mx-n1.mb-2
      .col-6.px-1: button.btn.btn-block.btn-primary.letter-spacing-n1px(@click="btnLoadDevice") #[i.fa.fa-sign-out] Load
      .col-6.px-1: button.btn.btn-block.btn-success.letter-spacing-n1px(@click="btnSaveDevice") #[i.fa.fa-floppy-o] Save
    .card.mb-2
      h6.card-header.text-white.bg-secondary #[i.fa.fa-cog.mr-1] Device Settings
      .card-body.px-3.pt-3.pb-2
        form(@submit.prevent)
          .input-group.input-group-sm.letter-spacing-n1px.mb-2
            .input-group-prepend: span.input-group-text.justify-content-center animationMode
            select.form-control.form-control-sm(v-model.number="ss.animationMode")
              option(value="0") Full
              option(value="1") Short
              option(value="2") None
          .input-group.input-group-sm.letter-spacing-n1px.mb-2
            .input-group-prepend: span.input-group-text.justify-content-center blePairingMode
            select.form-control.form-control-sm(v-model.number="ss.blePairingMode")
              option(value="0") Disable
              option(value="1") Enable
          .input-group.input-group-sm.letter-spacing-n1px.mb-2
            .input-group-prepend: span.input-group-text.justify-content-center blePairingKey
            input.form-control.form-control-sm(v-model="ss.blePairingKey", autocomplete="off", :type="ss.blePairingKeyVisible ? 'text' : 'password'")
            .input-group-append
              button.btn.btn-outline-secondary(v-if="ss.blePairingKeyVisible", type="button", @click="ss.blePairingKeyVisible = false"): i.fa.fa-eye
              button.btn.btn-outline-secondary(v-else, type="button", @click="ss.blePairingKeyVisible = true"): i.fa.fa-eye-slash
          .input-group.input-group-sm.letter-spacing-n1px.mb-2
            .input-group-prepend: span.input-group-text.justify-content-center deviceMode
            select.form-control.form-control-sm(v-model.number="ss.mode")
              option(value="0") TAG
              option(value="1") READER
          template(v-for="k in ['pressBtnA', 'pressBtnB', 'longPressBtnA', 'longPressBtnB']")
            .input-group.input-group-sm.letter-spacing-n1px.mb-2
              .input-group-prepend: span.input-group-text.justify-content-center {{ k }}
              select.form-control.form-control-sm(v-model.number="ss[k]")
                option(value="0") DISABLE
                option(value="1") CYCLE_SLOT_INC
                option(value="2") CYCLE_SLOT_DEC
                option(value="3") CLONE_IC_UID
                option(value="4") BATTERY
    .card.mb-2.text-sm
      h6.card-header.text-white.bg-info #[i.fa.fa-info-circle.mr-1] Device Info
      ul.list-group.list-group-flush.letter-spacing-n1px(v-if="ss.bleAddress")
        li.list-group-item.d-flex.justify-content-between.align-items-center
          span.text-muted appVersion
          span {{ ss?.appVersion ?? '?' }}
        li.list-group-item.d-flex.justify-content-between.align-items-center
          span.text-muted gitVersion
          span {{ ss?.gitVersion ?? '?' }}
        li.list-group-item.d-flex.justify-content-between.align-items-center
          span.text-muted bleAddress
          span {{ ss?.bleAddress ?? '?' }}
        li.list-group-item.d-flex.justify-content-between.align-items-center
          span.text-muted batteryLevel
          span {{ ss?.batteryLevel ?? '?' }} %
        li.list-group-item.d-flex.justify-content-between.align-items-center
          span.text-muted batteryVoltage
          span {{ ss?.batteryVoltage ?? '?' }} mV
        li.list-group-item.d-flex.justify-content-between.align-items-center
          span.text-muted chipId
          span {{ ss?.chipId ?? '?' }}
        li.list-group-item.d-flex.justify-content-between.align-items-center
          span.text-muted model
          span {{ ['ChameleonUltra', 'ChameleonLite']?.[ss?.model] ?? '?' }}
      .card-body.py-3(v-else) Click "Load" button to load device info.
    .card.mb-2
      h6.card-header.text-white.bg-danger #[i.fa.fa-exclamation-triangle.mr-1] Danger Zone
      .card-body.px-3.pt-3.pb-2.letter-spacing-n1px
        button.btn.btn-sm.btn-block.btn-outline-primary.mb-2(@click="btnEnterBootloader") #[i.fa.mr-1.fa-microchip] Enter bootloader
        button.btn.btn-sm.btn-block.btn-outline-danger.mb-2(@click="btnResetSettings") #[i.fa.mr-1.fa-cogs] Reset to default settings
        button.btn.btn-sm.btn-block.btn-outline-danger.mb-2(@click="btnBleDeleteAllBonds") #[i.fa.mr-1.fa-bluetooth] Delete ALL BLE bonds
        button.btn.btn-sm.btn-block.btn-outline-danger.mb-2(@click="btnWipeFds") #[i.fa.mr-1.fa-industry] Factory reset

block script
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/joi@17/dist/joi-browser.min.js")
  script.
    const { AnimationMode, ButtonAction, ButtonType, ChameleonUltra, Debug, DeviceMode, WebbleAdapter, WebserialAdapter } = window.ChameleonUltraJS
    const ultraUsb = new ChameleonUltra()
    ultraUsb.use(new Debug())
    ultraUsb.use(new WebserialAdapter())
    const ultraBle = new ChameleonUltra()
    ultraBle.use(new Debug())
    ultraBle.use(new WebbleAdapter())

    const { joi: Joi } = window
    const enumValues = e => _.filter(_.values(e), _.isNumber)
    const ButtonActionValues = enumValues(ButtonAction)
    const joiDeviceSettings = Joi.object({
      animationMode: Joi.valid(...enumValues(AnimationMode)).required(),
      blePairingKey: Joi.string().length(6).regex(/^\d{6}$/).required(),
      blePairingMode: Joi.boolean().truthy(1).falsy(0).required(),
      longPressBtnA: Joi.valid(...ButtonActionValues).required(),
      longPressBtnB: Joi.valid(...ButtonActionValues).required(),
      mode: Joi.valid(...enumValues(DeviceMode)).required(),
      pressBtnA: Joi.valid(...ButtonActionValues).required(),
      pressBtnB: Joi.valid(...ButtonActionValues).required(),
    })

    window.vm = new Vue({
      el: '#app',
      data: {
        ls: {
          adapter: 'ble',
        },
        ss: {
          animationMode: null,
          appVersion: null,
          batteryLevel: null,
          batteryVoltage: null,
          bleAddress: null,
          blePairingKey: null,
          blePairingKeyVisible: false,
          blePairingMode: null,
          chipId: null,
          gitVersion: null,
          longPressBtnA: null,
          longPressBtnB: null,
          mode: null,
          model: null,
          pressBtnA: null,
          pressBtnB: null,
        },
      },
      async mounted () {
        // 自動儲存功能
        for (const [storage, key] of [[localStorage, 'ls'], [sessionStorage, 'ss']]) {
          try {
            const saved = JSON5.parse(storage.getItem(location.pathname))
            if (saved) this.$set(this, key, _.merge({}, this[key], saved))
          } catch (err) {}
          this.$watch(key, () => {
            storage.setItem(location.pathname, JSON5.stringify(this[key]))
          }, { deep: true })
        }
      },
      computed: {
        ultra () {
          return this.ls.adapter === 'usb' ? ultraUsb : ultraBle
        },
      },
      methods: {
        async swalFire (args) {
          if (_.isPlainObject(args)) args.footer ??= '<a target="_blank" href="https://github.com/RfidResearchGroup/ChameleonUltra?tab=readme-ov-file#official-channels">Have questions? Join Discord!</a>'
          return await Swal.fire(args)
        },
        async btnAdapterTips () {
          await this.swalFire({
            title: 'Browser & OS',
            html: '<strong class="text-success">BLE</strong> is supported in ChromeOS, Chrome for Windows 10, macOS, Android 6.0, Microsoft Edge for Windows and <a class="btn-link" target="_blank" href="https://apps.apple.com/app/bluefy-web-ble-browser/id1492822055">Bluefy</a> for iPhone and iPad.<hr><strong class="text-success">USB</strong> is supported on all desktop platforms (ChromeOS, Linux, macOS, and Windows).',
          })
        },
        async btnLoadDevice () {
          const { ultra } = this
          try {
            this.showLoading({ text: 'Loading settings...' })
            const batteryInfo = await ultra.cmdGetBatteryInfo()
            const ss = {
              animationMode: await ultra.cmdGetAnimationMode(),
              appVersion: await ultra.cmdGetAppVersion(),
              batteryLevel: batteryInfo.level,
              batteryVoltage: batteryInfo.voltage,
              bleAddress: await ultra.cmdBleGetAddress(),
              blePairingKey: await ultra.cmdBleGetPairingKey(),
              blePairingMode: await ultra.cmdBleGetPairingMode() ? 1 : 0,
              chipId: await ultra.cmdGetDeviceChipId(),
              gitVersion: await ultra.cmdGetGitVersion(),
              mode: await ultra.cmdGetDeviceMode(),
              model: await ultra.cmdGetDeviceModel(),
            }
            for (const btn of [ButtonType.BUTTON_A, ButtonType.BUTTON_B]) {
              const btnName = 'AB'[btn - ButtonType.BUTTON_A]
              ss[`pressBtn${btnName}`] = await ultra.cmdGetButtonPressAction(btn)
              ss[`longPressBtn${btnName}`] = await ultra.cmdGetButtonLongPressAction(btn)
            }
            //- console.log(JSON.stringify(device, null, 2))
            this.$set(this, 'ss', { ...this.ss, ...ss, blePairingKeyVisible: false })
            Swal.close()
          } catch (err) {
            ultra.emitter.emit('error', err)
            await this.swalFire({ icon: 'error', text: err.message })
          }
        },
        async btnSaveDevice () {
          const { ultra } = this
          try {
            this.showLoading({ text: 'Saving settings...' })
            const ss = await joiDeviceSettings.validateAsync(this.ss, { stripUnknown: true })
            await ultra.cmdSetAnimationMode(ss.animationMode)
            await ultra.cmdBleSetPairingMode(ss.blePairingMode)
            await ultra.cmdBleSetPairingKey(ss.blePairingKey)
            await ultra.cmdChangeDeviceMode(ss.mode)
            for (const btn of [ButtonType.BUTTON_A, ButtonType.BUTTON_B]) {
              const btnName = 'AB'[btn - ButtonType.BUTTON_A]
              await ultra.cmdSetButtonPressAction(btn, ss[`pressBtn${btnName}`])
              await ultra.cmdSetButtonLongPressAction(btn, ss[`longPressBtn${btnName}`])
            }
            await ultra.cmdSaveSettings()
            await this.swalFire({ icon: 'success', text: 'Settings save successfully!' })
          } catch (err) {
            ultra.emitter.emit('error', err)
            await this.swalFire({ icon: 'error', text: err.message })
          }
        },
        async btnEnterBootloader () {
          if (!await this.confirm('Enter bootloader?', 'Yes', 'Cancel')) return
          await this.ultra.cmdDfuEnter().catch(err => { this.ultra.emitter.emit('error', err) })
        },
        async btnResetSettings () {
          if (!await this.confirm('Reset to default settings?', 'Yes', 'Cancel')) return
          await this.ultra.cmdResetSettings().catch(err => { this.ultra.emitter.emit('error', err) })
        },
        async btnBleDeleteAllBonds () {
          if (!await this.confirm('Delete ALL BLE bonds?', 'Yes', 'Cancel')) return
          await this.ultra.cmdBleDeleteAllBonds().catch(err => { this.ultra.emitter.emit('error', err) })
        },
        async btnWipeFds () {
          if (!await this.confirm('Factory reset?', 'Yes', 'Cancel')) return
          await this.ultra.cmdWipeFds().catch(err => { this.ultra.emitter.emit('error', err) })
        },
        async confirm (text, confirmButtonText, cancelButtonText) {
          return await new Promise((resolve, reject) => {
            let isConfirmed = false
            const args = {
              cancelButtonColor: '#3085d6',
              cancelButtonText,
              confirmButtonColor: '#d33',
              confirmButtonText,
              didDestroy: () => { resolve(isConfirmed) },
              focusCancel: true,
              icon: 'warning',
              reverseButtons: true,
              showCancelButton: true,
              text,
            }
            Swal.fire(args).then(res => { isConfirmed = res.isConfirmed })
          })
        },
        showLoading (opts = {}) {
          opts = {
            allowOutsideClick: false,
            showConfirmButton: false,
            ...opts,
          }
          if (Swal.isVisible()) return Swal.update(opts)
          Swal.fire({ ...opts, didRender: () => { Swal.showLoading() } })
        },
      },
    })
