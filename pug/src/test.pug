extends /include/bootstrapV4

block beforehtml
  - const title = 'Test'

block style
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif

block content
  #app.my-3.container(v-cloak)
    h4.text-center #[.bgicon.bgicon-chameleon-ultra.mr-1] #{title}
    .form-group.mt-3
      label Choose connection method:
      select.form-control.form-control-sm(v-model="ls.adapter")
        option(value="ble") via BLE (PC &amp; Android, bond is required)
        option(value="usb") via USB Serial (PC only)

block script
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/vconsole@3/dist/vconsole.min.js")
  script.
    window.vConsole = new window.VConsole()
    const { Buffer, ChameleonUltra, Debug, NrfDfu, NrfDfuWebserialAdapter, WebbleAdapter, WebserialAdapter } = window.ChameleonUltraJS // eslint-disable-line no-unused-vars, @typescript-eslint/no-unused-vars
    const ultraUsb = new ChameleonUltra()
    ultraUsb.use(new Debug())
    ultraUsb.use(new WebserialAdapter())
    const ultraBle = new ChameleonUltra()
    ultraBle.use(new Debug())
    ultraBle.use(new WebbleAdapter())

    window.vm = new Vue({
      el: '#app',
      data: {
        ls: {
          adapter: 'ble',
        },
        ss: {},
      },
      async mounted () {
        // 自動儲存功能
        for (const [storage, key] of [[localStorage, 'ls'], [sessionStorage, 'ss']]) {
          try {
            const saved = JSON5.parse(storage.getItem(location.pathname))
            if (saved) this.$set(this, key, _.merge({}, this[key], saved))
          } catch (err) {}
          this.$watch(key, () => {
            storage.setItem(location.pathname, JSON5.stringify(this[key]))
          }, { deep: true })
        }
      },
      computed: {
        ultra () {
          return this.ls.adapter === 'usb' ? ultraUsb : ultraBle
        },
      },
      methods: {
        showLoading (title, text) {
          Swal.fire({
            title,
            text,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => { Swal.showLoading() },
          })
        },
      },
    })
